To access API methods, you must be authenticated. The authenticatetion is based on [JWT technology](http://jwt.io).

## Control access [/auth]

### Authenticate [POST]

For auth, send the `username` and the `password` as a json object. In this
current version, exists only a `username`: `pedal pi`

```json
{
  "username": "pedal pi",
  "password": "pedal pi",
}
```

::: warning
The initial password is `pedal pi`. Please, on the first login, change
the password [LINK]!
:::

If the data is correct, will be returned the **auth token**.
You need send it in every request. See a example in the [next section](#authentication-auth-token).

::: warning
The token has a expiration of **7 days** from login response time. If the token has
expired, is necessary request auth to obtains a new token.
:::

+ Request  (application/json; charset=UTF-8)

    + Body

            {
              "username": "pedal pi",
              "password": "pedal pi",
            }

+ Response 200 (application/json; charset=UTF-8)
    + Body

            {"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjE5ODM1NDZ9.MKT1XRgqa68ADIdH1ro0MkIWwh9mXrNPjz5q5aUhFKc"}

+ Response 401 (application/json; charset=UTF-8)
    + Body

            {"error": "Invalid username or password"}

## Auth token [/something]

This is an example how to request something.

### Example request [GET]

::: note
The Authorization code error is `401`.

See the possible errors in right selecting a request.
:::

+ Request successful (application/json; charset=UTF-8)
    + Headers

            Authorization: bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjE5ODM1NDZ9.MKT1XRgqa68ADIdH1ro0MkIWwh9mXrNPjz5q5aUhFKc
+ Response 200 (application/json; charset=UTF-8)
    + Body

            something


+ Request without Authorization (application/json; charset=UTF-8)
+ Response 401 (application/json; charset=UTF-8)
    + Body

            {"error": "Missing authorization"}

+ Request invalid Authorization standart (application/json; charset=UTF-8)
    + Headers

            Authorization: bearer something eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjE5ODM1NDZ9.MKT1XRgqa68ADIdH1ro0MkIWwh9mXrNPjz5q5aUhFKc
+ Response 401 (application/json; charset=UTF-8)
    + Body

            {"error": "Invalid header authorization. The Authorization header not match with the standart `Authorization: bearer <token>`"}

+ Request token with wrong signature (application/json; charset=UTF-8)
    + Headers

            Authorization: bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjE5ODM1NDZ9.MKT1XRgqa68ADIdH1ro0MkIWwh9mXrNPjz5q5aUhFKc
+ Response 401 (application/json; charset=UTF-8)
    + Body

            {"error": "Signature verification failed"}

+ Request token expired (application/json; charset=UTF-8)
    + Headers

            Authorization: bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjE5ODM1NDZ9.MKT1XRgqa68ADIdH1ro0MkIWwh9mXrNPjz5q5aUhFKc
+ Response 401 (application/json; charset=UTF-8)
    + Body

            {"error": "Signature has expired"}

## Token identifier [/ws]

With a token identifier, it is possible to send changes if they are identified, so that no notifications of their own changes to WebSocket occur.

When a connection is established with `http://pedalpi.local/ws`, a `TOKEN message` (`"type": "TOKEN"`) returns a **uuid4** for the client.

```json
{
  "value": "{token uuid4}",
  "type": "TOKEN"
}
```

It's necessary that all requests add the following header parameter.

```http
x-xsrf-token: {token uuid4}
```

### Example request [GET]

When a user is auth, a access token is sended
AWhen obtained the access token, all the requests needs

It's a example request for a random address

+ Request  (application/json; charset=UTF-8)

    + Headers

            x-xsrf-token: {token uuid4}

+ Response 200 (application/json; charset=UTF-8)
    + Body

            anything
